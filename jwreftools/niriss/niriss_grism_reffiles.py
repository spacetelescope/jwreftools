"""
This module contains functions to create NIRISS reference files.


Grism
-----

January 2022
------------
V3 of the CONF files was implemented in Jan, 2022.
This implements a transform which is a polynomial of degree 2,
where the coefficients are polynomials of degree 2:

dx = cpoly_0x + cpoly_1x * t + cpoly_2x * t**2
dy = cpoly_0y + cpoly_1y * t + cpoly_2y * t**2

February 28, 2017
-----------------

* Throughput curves generated using the "current" ETC configuration files
found at `/grp/jwst/wit/niriss/ETC/CURRENT/`. These include the following
components:

        - Telescope OTE (primary area = 254009.0 cm^2 , from pandeia/ETC)
        - Internal instrument optics
        - Blocking filter passband
        - Disperser passband (`p1=A`, `p2=C`, `p3=D` and `m1=E` orders/"beams").
        - Detector QE and quantum yield

        Through there are separate ETC files, these are currently the same for
        both the GR150C and GR150R dispersing elements.  (**NB:** higher orders
        are visible in the CV3 test data but are not currently included in the
        configuration files.)

* The ETC doesn't have a 0th order throughput file (`beam=B`), so for now is
  taken to be the original file generated by V. Dixon for the "WFSS cookbook".

* The trace configuration has been updated by G. Brammer from the original
  cookbook files based on the CV trace and wavelength calibration data.

        - Separate traces for the two dispersers GR150R (column) and GR150C (row)
dispersing elements.

        - It is now assumed that the traces for all orders and filters are
        described by a common polynomial function, though with a 0th order
        offset for the different blocking filters.  This simplifies the
        analysis and is also fully consistent with the CV3 data.

        - **The configuration files are generated in the old aXe convention
        with increasing wavelength of the p1st order spectra increasing towards
         `+x` detector pixels**.  This corresponds to CCW rotations of the
          DMS-format images of 90 (GR150R) and 180 (GR150C) degrees.

        - The traces are defined relative to a reference position of the
         filter wheel specified in the `FWCPOS_REF` parameter (in degrees).
           For a given science observation, the trace polynomials must be
            rotated by an angle `FWCPOS - FWCPOS_REF`.  This rotation has an
             analytic solution for linear and quadratic traces.

        - Spatial variation of the trace polynomials was determined from 5
         separate locations on the detector.

"""

import datetime
import numpy as np
from asdf.tags.core import Software, HistoryEntry
from astropy.modeling.models import Polynomial2D, Polynomial1D
from astropy import units as u

from jwst.datamodels import NIRISSGrismModel
from jwst.datamodels import wcs_ref_models


def common_reference_file_keywords(reftype=None,
                                   author="STScI",
                                   exp_type=None,
                                   description="NIRISS Reference File",
                                   title="NIRISS Reference File",
                                   useafter="2014-01-01T00:00:00",
                                   filtername=None,
                                   filename="",
                                   pupil=None, **kwargs):
    """
    exp_type can be also "N/A", or "ANY".
    """
    if exp_type is None:
        raise ValueError("Expected exp_type")
    if reftype is None:
        raise ValueError("Expected reftype")

    ref_file_common_keywords = {
        "author": author,
        "description": description,
        "exposure": {"type": exp_type},
        "instrument": {"name": "NIRISS",
                       "detector": "NIS"},
        "pedigree": "ground",
        "reftype": reftype,
        "telescope": "JWST",
        "title": title,
        "useafter": useafter,
        "filename": filename,
        }

    if filtername is not None:
        ref_file_common_keywords["instrument"]["filter"] = filtername
    if pupil is not None:
        ref_file_common_keywords["instrument"]["pupil"] = pupil

    ref_file_common_keywords.update(kwargs)
    return ref_file_common_keywords


def create_grism_config(conffile,
                        fname,
                        pupil,
                        fwcpos_ref,
                        author="STScI",
                        history="NIRISS Grism Parameters",
                        outname="test.asdf"):
    """
    Parameters
    ----------
    conffile : str
        The NIRISS CONF file, aXe format

    Pupil is the blocking filter.
    Filter is the grism.

    Create an asdf reference file to hold Grism C (column) or Grism R (rows)
    configuration, no sensativity information is included

    Note: The orders are named alphabetically, i.e. Order A, Order B
    There are also sensativity fits files which are tables of wavelength,
    sensativity, and error. These are specified in the conffile but will
    not be read in and saved in the output reference file.

    direct_filter is not specified because it assumes that the wedge
    information (wx,wy) is included in the conf file in one of the key-value
    pairs, where the key includes the beam designation

    For each spectral order, the configuration file contains a pair of
    magnitude-cutoff values. Sources with magnitudes fainter than the
    extraction cutoff (MMAG_EXTRACT_X) are not extracted, but are accounted
    for when computing the spectral contamination and background estimates.
    Sources with magnitudes fainter than the second cutoff (MMAG_MARK_X) are
    completely ignored.  Here, X equals A, B, C, etc., with each letter
    referring to a spectral order, as specified in the configuration file.
     -- the initial conf file that nor gave me didn't have this keyword so
     this code adds a placeholder.

     this reference file also contains the polynomial model which is
     appropriate for the coefficients which are listed.

    Parameters
    ----------
    conffile : str
        The text file with configuration information.
        The "CONF" file.
    fname : str
        Name of the filter the conffile corresponds to.
    pupil : str
        Name of the grism the conffile corresponds to.
    author : str
        The name of the author.
    history : str
        A comment about the refrence file to be saved with
        the meta information.
    outname : str
        Output name for the reference file.


    Returns
    -------
    fasdf : asdf.AsdfFile(jwst.datamodels.NIRISSGrismModel)
    """

    if not history:
        history = "Created from {0:s}".format(conffile)

    ref_kw = common_reference_file_keywords(reftype="specwcs",
                                            description="{0:s} dispersion model parameters".format(pupil),
                                            exp_type="NIS_WFSS",
                                            model_type='NIRISSGrismModel',
                                            pupil=pupil,
                                            filtername=fname,
                                            history=history,
                                            author=author,
                                            filename=outname,
                                            )

    # get all the key-value pairs from the input file
    beamdict = dict_from_file(conffile)

    # The lists below need
    # to remain ordered and referenced by filter or order
    orders = sorted(beamdict.keys())
    displ = []
    dispx = []
    dispy = []
    invdispl = []

    for order in orders:
        # convert the displ wavelengths to microns
        l0 = beamdict[order]['DISPL'][0] / 10000.
        l1 = beamdict[order]['DISPL'][1] / 10000.
        # create polynomials for the coefficients of each order
        invdispl.append(Polynomial1D(1, c0=-l0/l1, c1=1./l1))
        displ.append(Polynomial1D(1, c0=l0, c1=l1))

        # the dispxy functions here are pulled into a 1D
        # such that the final poly is ans = cpoly_0 + t*cpoly_1 + t**2 * cpoly_2

        e0, e1, e2 = beamdict[order]['DISPX']
        # free coefficient
        cpoly_0 = Polynomial2D(2, c0_0=e0[0], c1_0=e0[1], c2_0=e0[4],
                               c0_1=e0[2], c1_1=e0[5], c0_2=e0[3])
        cpoly_1 = Polynomial2D(2, c0_0=e1[0], c1_0=e1[1], c2_0=e1[4],
                               c0_1=e1[2], c1_1=e1[5], c0_2=e1[3])
        cpoly_2 = Polynomial2D(2, c0_0=e2[0], c1_0=e2[1], c2_0=e2[4],
                               c0_1=e2[2], c1_1=e2[5], c0_2=e2[3])
        dispx.append((cpoly_0, cpoly_1, cpoly_2))

        e0, e1, e2 = beamdict[order]['DISPY']
        cpoly_0 = Polynomial2D(2, c0_0=e0[0], c1_0=e0[1], c2_0=e0[4],
                               c0_1=e0[2], c1_1=e0[5], c0_2=e0[3])
        cpoly_1 = Polynomial2D(2, c0_0=e1[0], c1_0=e1[1], c2_0=e1[4],
                               c0_1=e1[2], c1_1=e1[5], c0_2=e1[3])
        cpoly_2 = Polynomial2D(2, c0_0=e2[0], c1_0=e2[1], c2_0=e2[4],
                               c0_1=e2[2], c1_1=e2[5], c0_2=e2[3])
        dispy.append((cpoly_0, cpoly_1, cpoly_2))
        # disp is cpoly_0 + t * cpoly_1 + t**2 * cpoly_2
        # invdisp is (t - model_x) / model_y - old linear one

    # change the orders into translatable integer strings
    # the conf file niriss is giving me are using letter designations
    # beam_lookup = {"A": "+1", "B": "0", "C": "+2", "D": "+3", "E": "-1"}
    # ordermap = [int(beam_lookup[order]) for order in orders]

    # save the reference file
    ref = NIRISSGrismModel()
    ref.meta.instance.update(ref_kw)
    ref.meta.input_units = u.micron
    ref.meta.output_units = u.micron
    ref.dispx = dispx
    ref.dispy = dispy
    ref.displ = displ
    ref.invdispl = invdispl
    # Commented out because it's not in the V3 of the CONF files.
    # ref.fwcpos_ref = conf['FWCPOS_REF']
    ref.order = [int(order) for order in orders]
    entry = HistoryEntry({'description': history,
                          'time': datetime.datetime.utcnow()})
    sdict = Software({'name': 'niriss_reftools.py',
                      'author': author,
                      'homepage': 'https://github.com/spacetelescope/jwreftools',
                      'version': '0.7.1'})
    entry['software'] = sdict
    ref.history.append(entry)
    ref.to_asdf(outname)
    ref.validate()


def create_grism_wavelengthrange(outname="niriss_wavelengthrange.asdf",
                                 history="NIRISS Grism-fiter wavelengthrange",
                                 author="STScI",
                                 module="N/A",
                                 pupil="N/A",
                                 wavelengthrange=None,
                                 extract_orders=None):
    """Create a wavelengthrange reference file for NIRISS.

    Parameters
    ----------
    outname: str
        The output name of the file
    history: str
        History information about it's creation
    author: str
        Person or entity making the file
    module: str
    pupil: str
    wavelengthrange: list(tuples)
        A list of tuples that set the order, filter, and wavelength
        range min and max
    extract_orders: list[list]
        A list of lists that specify
    """
    ref_kw = common_reference_file_keywords(reftype="wavelengthrange",
                                            title="NIRISS WFSS wavelengthrange",
                                            exp_type="NIS_WFSS",
                                            description="NIRISS WFSS Filter Wavelength Ranges",
                                            useafter="2014-01-01T00:00:00",
                                            author=author,
                                            model_type="WavelengthrangeModel",
                                            module=module,
                                            pupil=None,
                                            filename=outname,
                                            filtername=None)

    if wavelengthrange is None:
        orders = [-1, 0, 1, 2, 3]  # orders available
        # These numbers from Grabriel Brammer, in microns
        # The ranges are repeated because he said that
        # to approximation they are the same for all orders
        # This is a list of tuples that specify the order, filter,
        # wave min, wave max
        tdict = {'F090W': [0.79, 1.03],
                 'F115W': [0.97, 1.32],
                 'F140M': [1.29, 1.52],
                 'F150W': [1.29, 1.71],
                 'F158M': [1.41, 1.74],
                 'F200W': [1.70, 2.28]
                 }

        wavelengthrange = []
        for order in orders:
            for k, v in tdict.items():
                wavelengthrange.append((order, k, v[0], v[1]))
    else:
        orders = sorted(set((x[0] for x in wavelengthrange)))

    filters = sorted(set((x[1] for x in wavelengthrange)))

    if extract_orders is None:
        # These are the orders that will be extracted by
        # default in the pipeline. It should be a list
        # of list ordered the same as filter_range
        # that says what orders
        # should be extracted for each filter.
        # The values that are currently here are those
        # specified by Kevin Volk via communication.
        # Only F090W extracts more than order 1
        extract_orders = []
        for f in filters:
            if f == 'F090W':
                order = [1, 2]
            else:
                order = [1]
            extract_orders.append([f, order])

    ref = wcs_ref_models.WavelengthrangeModel()
    ref.meta.instance.update(ref_kw)
    ref.meta.input_units = u.micron
    ref.meta.output_units = u.micron
    ref.waverange_selector = filters
    ref.wavelengthrange = wavelengthrange
    ref.order = orders
    ref.extract_orders = extract_orders

    # create the history entries
    history = HistoryEntry({'description': history,
                            'time': datetime.datetime.utcnow()})
    software = Software({'name': 'niriss_reftools.py',
                         'author': author,
                         'homepage': 'https://github.com/spacetelescope/jwreftools',
                         'version': '0.7.1'})
    history['software'] = software
    ref.history.append(history)
    ref.to_asdf(outname)
    ref.validate()


def dict_from_file(conffile):
    def update_beamdict(beamdict, beam, dispx, dispy, displ):
        print(f"updating beam {beam}")
        beamdict[beam] = {'DISPX': np.array([line.split()[1:] for line in dispx], dtype=np.float),
                          'DISPY': np.array([line.split()[1:] for line in dispy], dtype=np.float),
                          'DISPL': np.array([line.split()[1:] for line in displ], dtype=np.float)
                          }
    f = open(conffile)
    lines = f.readlines()
    f.close()
    beamdict = {}
    beam = ""
    for line in lines:
        if line.startswith('BEAM'):

            if beam.strip():
                update_beamdict(beamdict, beam, dispx, dispy, displ)
            dispx = []
            dispy = []
            displ = []
            beam = line.split('_')[1].strip()

        elif line.startswith('DISPL'):
            displ.append(line)
        elif line.startswith('DISPX'):
            dispx.append(line)
        elif line.startswith('DISPY'):
            dispy.append(line)
        else:
            continue

    # Capture the last order reading from the CONF file
    update_beamdict(beamdict, beam, dispx, dispy, displ)
    return beamdict
